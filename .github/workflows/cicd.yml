name: Java CI/CD with Docker and GitHub Actions

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set image tag (commit SHA)
        id: vars
        run: echo "tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/onsurvey:${{ steps.vars.outputs.tag }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/onsurvey:latest \
            .

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/onsurvey:${{ steps.vars.outputs.tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/onsurvey:latest

  deploy-ncp:
    if: github.ref == 'refs/heads/develop'
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (for docker-compose.yml)
        uses: actions/checkout@v4

      - name: Create prod config from secrets
        run: |
          mkdir -p config
          printf "%s" "${{ secrets.ONSURVEY_APP_PROD_YML }}" > config/application-prod.yml
          chmod 600 config/application-prod.yml

      - name: Copy files to NCP server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USER }}
          key: ${{ secrets.NCP_SSH_KEY }}
          source: |
            docker-compose.yml
            config/application-prod.yml
          target: "/deploy/"

      - name: Deploy on NCP (blue-green)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USER }}
          key: ${{ secrets.NCP_SSH_KEY }}
          script: |
            set -e
            DEPLOY_DIR=/deploy
            export TZ=Asia/Seoul

            echo "[DEBUG] list /deploy before deploy"
            ls -al $DEPLOY_DIR || true
            ls -al $DEPLOY_DIR/config || true
            
            # .env 생성/갱신
            cat > "$DEPLOY_DIR/.env" <<'ENV'
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            SPRING_IMAGE_TAG=latest
            ENV
            
            sed -i "s/^SPRING_IMAGE_TAG=.*/SPRING_IMAGE_TAG=${{ needs.build-and-push.outputs.tag }}/" "$DEPLOY_DIR/.env"
            
            test -f "$DEPLOY_DIR/docker-compose.yml"
            test -f "$DEPLOY_DIR/config/application-prod.yml"

            chmod 600 "$DEPLOY_DIR/config/application-prod.yml" || true

            # 최초 1회 부트스트랩 (네트워크/볼륨 등)
            if [ ! -f "$DEPLOY_DIR/.bootstrapped" ]; then
              docker compose -f "$DEPLOY_DIR/docker-compose.yml" up -d || true
              touch "$DEPLOY_DIR/.bootstrapped"
            fi

            # 새 이미지 pull (커밋 SHA)
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/onsurvey:${{ needs.build-and-push.outputs.tag }}"
            docker pull "$IMAGE" || true

            # 무중단 배포 스크립트 실행
            bash "$DEPLOY_DIR/blue-green.sh" \
              "${{ secrets.DB_URL }}" \
              "${{ secrets.DB_USERNAME }}" \
              "${{ secrets.DB_PASSWORD }}" \
              "${{ secrets.DOCKERHUB_USERNAME }}" \
              "$IMAGE"
